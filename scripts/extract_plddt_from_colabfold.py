#!/usr/bin/env python3
"""
Extract pLDDT scores from ColabFold PDB structures.

This script processes PDB files generated by ColabFold to extract pLDDT confidence scores
(stored in the B-factor column) and saves them in a format compatible with the
merge_datasets.py pipeline.

The output format is TSV with three columns:
protein_id    length    plddt_scores_comma_separated

Author: Tobias Senoner
"""

import argparse
from pathlib import Path
import sys
from tqdm import tqdm


def extract_plddt_from_pdb(pdb_file: Path) -> tuple[str, int, list[float]]:
    """
    Extract pLDDT scores from a ColabFold PDB file.

    Args:
        pdb_file: Path to the PDB file

    Returns:
        Tuple of (protein_id, length, plddt_scores)
    """
    protein_id = pdb_file.stem  # Filename without extension
    plddt_scores = []

    with open(pdb_file, "r") as f:
        for line in f:
            # Only process ATOM records for CA (alpha carbon) atoms to avoid duplicates
            if line.startswith("ATOM") and line[12:16].strip() == "CA":
                # B-factor column is at positions 60-66 in PDB format
                try:
                    plddt = float(line[60:66].strip())
                    plddt_scores.append(plddt)
                except ValueError:
                    print(
                        f"Warning: Could not parse B-factor in {pdb_file}: '{line[60:66].strip()}'"
                    )
                    continue

    return protein_id, len(plddt_scores), plddt_scores


def process_pdb_directory(pdb_dir: Path, output_file: Path) -> None:
    """
    Process all PDB files in a directory and extract pLDDT scores.

    Args:
        pdb_dir: Directory containing PDB files
        output_file: Output TSV file path
    """
    if not pdb_dir.exists():
        print(f"Error: PDB directory does not exist: {pdb_dir}")
        sys.exit(1)

    # Find all PDB files
    pdb_files = list(pdb_dir.glob("*.pdb"))
    if not pdb_files:
        print(f"Error: No PDB files found in {pdb_dir}")
        sys.exit(1)

    print(f"Found {len(pdb_files)} PDB files in {pdb_dir}")

    # Create output directory if it doesn't exist
    output_file.parent.mkdir(parents=True, exist_ok=True)

    # Process files and write results
    processed_count = 0
    with open(output_file, "w") as out_f:
        for pdb_file in tqdm(sorted(pdb_files), desc="Processing PDB files"):
            try:
                protein_id, length, plddt_scores = extract_plddt_from_pdb(pdb_file)

                if not plddt_scores:
                    tqdm.write(f"Warning: No pLDDT scores found in {pdb_file}")
                    continue

                # Convert pLDDT scores to integers (as expected by merge_datasets.py)
                plddt_scores_int = [int(round(score)) for score in plddt_scores]
                plddt_scores_str = ",".join(map(str, plddt_scores_int))

                # Use protein ID directly since these are ColabFold structures, not AlphaFold
                # Write in the format: ID\tlength\tplddt_scores
                out_f.write(f"{protein_id}\t{length}\t{plddt_scores_str}\n")
                processed_count += 1

            except Exception as e:
                tqdm.write(f"Error processing {pdb_file}: {e}")
                continue

    print(f"‚úÖ Successfully processed {processed_count} PDB files")
    print(f"üíæ pLDDT scores saved to: {output_file}")


def main():
    """Main entry point with command-line argument parsing."""
    parser = argparse.ArgumentParser(
        description="Extract pLDDT scores from ColabFold PDB structures",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  python extract_plddt_from_colabfold.py
  python extract_plddt_from_colabfold.py --pdb-dir data/interm/2024_new/colabfold/pdb --output data/interm/2024_new/colabfold/plddt.tsv
        """,
    )

    parser.add_argument(
        "--pdb-dir",
        type=Path,
        default=Path("data/interm/2024_new/colabfold/pdb"),
        help="Directory containing ColabFold PDB files (default: data/interm/2024_new/colabfold/pdb)",
    )

    parser.add_argument(
        "--output",
        type=Path,
        default=Path("data/interm/2024_new/colabfold/plddt.tsv"),
        help="Output TSV file path (default: data/interm/2024_new/colabfold/plddt.tsv)",
    )

    args = parser.parse_args()

    print("üß¨ COLABFOLD pLDDT EXTRACTION")
    print("=" * 40)
    print(f"üìÅ PDB directory: {args.pdb_dir}")
    print(f"üíæ Output file: {args.output}")
    print()

    process_pdb_directory(args.pdb_dir, args.output)

    print("‚úÖ pLDDT extraction completed successfully!")


if __name__ == "__main__":
    main()
